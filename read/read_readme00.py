import re
import os
from pathlib import Path
import time

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ —Å README —Ñ–∞–π–ª–∞–º–∏ (—Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞)
def get_readme_folder():
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
    return str(Path(__file__).parent)

# Main —Ñ—É–Ω–∫—Ü–∏—è
def main():
    global people
    global last_file_check
    global folder_path
    
    folder_path = get_readme_folder()
    people, last_file_check = list_readme_files()
    
    while True:
        print("\n" + "="*50)
        print("–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞–ø–∏—à–∏—Ç–µ 'end'")
        a = input(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ README00{people} –∏–ª–∏ 'new' –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã—Ö
        if a.lower() == "end":
            break
        elif a.lower() == "new":
            add_new_user()
        else:
            parse_readme(a)
            
# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö README00* —Ñ–∞–π–ª–æ–≤
def list_readme_files():
    global folder_path
    print("\n–°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –§–ê–ô–õ–´:")
    print("-" * 30)
    print(f"–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ: {folder_path}")
    
    readme_files = [f for f in os.listdir(folder_path) if f.startswith('README00') and f.endswith('.md')]
    
    if not readme_files:
        print("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ.")
        return [], time.time()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –Ω–æ–º–µ—Ä—É
    readme_files.sort()
    
    people = []
    for file in readme_files:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        number = file.replace('README00', '').replace('.md', '')
        if number.isdigit():
            number = int(number)
        else:
            number = number.lstrip('0')
        
        print(f"- {file} (–Ω–æ–º–µ—Ä: {number})")
        people.append(str(number))
    
    return people, time.time()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
def check_for_file_changes(previous_files, previous_check_time):
    global folder_path
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    current_files = [f for f in os.listdir(folder_path) if f.startswith('README00') and f.endswith('.md')]
    current_files.sort()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    new_files = [f for f in current_files if f not in [f"README00{x}.md" for x in previous_files]]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    deleted_files = [f for f in [f"README00{x}.md" for x in previous_files] if f not in current_files]
    
    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    if new_files:
        print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã: {', '.join(new_files)}")
    
    if deleted_files:
        print(f"\n‚ö†Ô∏è  –§–∞–π–ª—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã: {', '.join(deleted_files)}")
    
    return current_files != [f"README00{x}.md" for x in previous_files]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
def check_file_exists(file_number):
    global folder_path
    file_path = os.path.join(folder_path, f"README00{file_number}.md")
    return os.path.exists(file_path)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
def get_next_available_number():
    global folder_path
    
    readme_files = [f for f in os.listdir(folder_path) if f.startswith('README00') and f.endswith('.md')]
    
    if not readme_files:
        return 1
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    numbers = []
    for file in readme_files:
        number_str = file.replace('README00', '').replace('.md', '')
        if number_str.isdigit():
            numbers.append(int(number_str))
    
    if numbers:
        return max(numbers) + 1
    else:
        return 1

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_new_user():
    global people, last_file_check, folder_path
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
    if check_for_file_changes(people, last_file_check):
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ! –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤...")
        people, last_file_check = list_readme_files()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–æ–º–µ—Ä
    new_number = get_next_available_number()
    
    # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if check_file_exists(new_number):
        print(f"‚ö†Ô∏è –§–∞–π–ª README00{new_number}.md —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        people, last_file_check = list_readme_files()
        return None
    
    college = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–¥–∂–∞: ") 
    course = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: ") 
    name = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): ") 
    group = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ")
    id = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID: ")
    
    content =f"""
# studyproject
–ö–æ–ª–ª–µ–¥–∂: {college}
–ö—É—Ä—Å: {course}
–§–ò: {name}
–ö–æ–º–∞–Ω–¥–∞: {group} 
ID: {id}
"""
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    file_path = os.path.join(folder_path, f'README00{new_number}.md')
    
    try:
        with open(file_path, 'w', encoding='utf-8') as file:
            file.write(content)
        print(f"\n‚úÖ –§–∞–π–ª README00{new_number}.md —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print(f"–ü—É—Ç—å: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –≤–¥—Ä—É–≥ —Ç–∞–∫–æ–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        time.sleep(0.1)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        if check_for_file_changes(people, last_file_check):
            print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞!")
            people, last_file_check = list_readme_files()
        else:
            people.append(str(new_number))
            
        return college, course, name, group, id
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ README —Ñ–∞–π–ª–∞ –∏ –∏—Ö –≤—ã–≤–æ–¥
def parse_readme(a):
    global people, last_file_check, folder_path
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º
    if check_for_file_changes(people, last_file_check):
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ! –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤...")
        people, last_file_check = list_readme_files()
    
    college = ""
    course = ""
    name = ""
    group = ""
    id = ""
    
    file_path = os.path.join(folder_path, f'README00{a}.md')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª README00{a}.md –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print(f"–ü—É—Ç—å: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ
        if a in people:
            print(f"‚ö†Ô∏è  –§–∞–π–ª README00{a}.md –±—ã–ª —É–¥–∞–ª–µ–Ω!")
        
        b = input("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? (–î–∞/–ù–µ—Ç)\n") 
        if b.lower() in ['–¥–∞', '–¥', 'yes', 'y']:
            add_new_user()
        else:
            print("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥.")
        return None, None, None, None, None
    
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
            college_match = re.search(r'–ö–æ–ª–ª–µ–¥–∂:\s*(.+)', content)
            course_match = re.search(r'–ö—É—Ä—Å:\s*(.+)', content)  
            name_match = re.search(r'–§–ò:\s*(.+)', content)
            group_match = re.search(r'–ö–æ–º–∞–Ω–¥–∞:\s*(.+)', content) 
            id_match = re.search(r'ID:\s*(.+)', content) 
            
            if college_match:
                college = college_match.group(1).strip()
            if course_match:
                course = course_match.group(1).strip()
            if name_match:
                name = name_match.group(1).strip()
            if group_match:
                group = group_match.group(1).strip()
            if id_match:
                id = id_match.group(1).strip()

            # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!")
            print()
            print("=" * 50)
            print(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!") 
            print(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ {college}")
            print(f"–ö—É—Ä—Å: {course}")
            print(f"–ö–æ–º–∞–Ω–¥–∞: {group}")
            print(f"ID: {id}")
            print("=" * 50)
            print()
            print("–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –≤ –æ–±—É—á–µ–Ω–∏–∏! üöÄ")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    
    return college, course, name, group, id

# –ó–∞–ø—É—Å–∫ main —Ñ—É–Ω–∫—Ü–∏–∏
if __name__ == "__main__":
    main()